@inject BreadCrumbState State
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="top-row px-4" data-permanent="true">
	@{bool isFirst = true;}
	@foreach (var item in State.BreadCrumbs.Skip(1)) // Skip the first item (current page)
	{
		if (!isFirst)
		{
			<text> - </text>
		}
		<span class="mx-1">
			<a href="@item.Url" @onclick="() => NavigateTo(item.Url)">@item.Title</a>
		</span>
		isFirst = false;
	}
</div>

@code {

	private IDisposable? navigationHandler;

	protected override void OnInitialized()
	{
		navigationHandler = NavigationManager.RegisterLocationChangingHandler(OnLocationChanging);
	}

	private void NavigateTo(string url)
	{
		// remove all breadcrumbs going back to the URL submitted
		while (State.BreadCrumbs.Count > 0 && State.BreadCrumbs.Peek().Url != url)
		{
			State.BreadCrumbs.Pop();
		}

		NavigationManager.NavigateTo(url);
	}

  private ValueTask OnLocationChanging(LocationChangingContext context)
	{	
		// Schedule a state change after navigation completes
		Task.Run(async () =>
		{
			await Task.Delay(100); // Allow time for new page to render and add breadcrumb
			await InvokeAsync(StateHasChanged);
		});
		
		return ValueTask.CompletedTask;
	}

	public void Dispose()
	{
		navigationHandler?.Dispose();
	}

}