@page "/weather"
@inject StateBag stateBag
@inject NavigationManager navigationManager
@implements IDisposable

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

@if (stateBag.BreadCrumbs.Count > 0)
{
    <button class="btn btn-secondary mb-3" @onclick="GoBack">
        <span class="bi bi-arrow-left-short"></span> Back
    </button>
}

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        navigationHandler = navigationManager.RegisterLocationChangingHandler(OnLocationChanging);

        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private IDisposable? navigationHandler;
    bool popped = false;

    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (popped)
        {
            popped = false;
            return;
        }
        stateBag.BreadCrumbs.Push("/Weather");
    }
    private void GoBack()
    {
        if (stateBag.BreadCrumbs.Count > 0)
        {
            var url = stateBag.BreadCrumbs.Pop();
            popped = true;
            navigationManager.NavigateTo(url);
        }
    }

    public void Dispose()
    {
        navigationHandler?.Dispose();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
